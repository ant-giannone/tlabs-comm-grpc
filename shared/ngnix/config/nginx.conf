user nginx;

worker_processes auto;

worker_rlimit_nofile 10240;

# Leave this empty for now
events {}

http {
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent"';

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''        close;
  }

  upstream grpcservers {
    # The docker endpoint of your grpc servers, you can have multiple here
    server service-b1:8443;
    server service-b2:8443;
    server service-b3:8443;
  }

  server {
    listen 1443 ssl http2;

    # Create a certificate that points to the hostname, e.g. nginx for docker
    # $ openssl req -nodes -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -subj '/CN=nginx'
    ssl_certificate     /run/secrets/my-test-cert.crt;
    ssl_certificate_key /run/secrets/my-test-key-PKCS8.pem;

    location / {
      # Replace localhost:50051 with the address and port of your gRPC server
      # The 'grpc://' prefix is optional; unencrypted gRPC is the default

      # grpc:// no-TLS; grpcs:// if your upstreams are listening on TLS.
      grpc_pass grpcs://grpcservers;
      error_page 502 = /error502grpc;
    }

    location = /error502grpc {
      internal;
      default_type application/grpc;
      add_header grpc-status 14;
      add_header grpc-message "unavailable";
      return 204;
    }
  }
}